{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 7,
  "links": [
    {
      "asDropdown": false,
      "icon": "external link",
      "includeVars": false,
      "keepTime": false,
      "tags": [
        "1st_Level"
      ],
      "targetBlank": false,
      "title": "Home",
      "tooltip": "",
      "type": "dashboards",
      "url": ""
    },
    {
      "asDropdown": false,
      "icon": "external link",
      "includeVars": true,
      "keepTime": true,
      "tags": [
        "Standard"
      ],
      "targetBlank": false,
      "title": "Session",
      "tooltip": "",
      "type": "dashboards",
      "url": ""
    }
  ],
  "liveNow": false,
  "panels": [
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 53,
      "panels": [],
      "title": "Session ${SessionId} for ${user} details",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "center",
            "displayMode": "auto",
            "inspect": false,
            "minWidth": 50
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Duration"
            },
            "properties": [
              {
                "id": "unit",
                "value": "m"
              },
              {
                "id": "custom.width",
                "value": 138
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Game"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 209
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Session Type"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 110
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Duration"
            },
            "properties": [
              {
                "id": "unit",
                "value": "clockms"
              },
              {
                "id": "decimals",
                "value": 2
              },
              {
                "id": "custom.width",
                "value": 200
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Stop"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 112
              },
              {
                "id": "unit",
                "value": "dateTimeFromNow"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Start"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 119
              },
              {
                "id": "unit",
                "value": "dateTimeFromNow"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Car Model"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 221
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Track"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 153
              },
              {
                "id": "links",
                "value": [
                  {
                    "title": "${Track}",
                    "url": "${Domain}/d/${Track}?var-TrackName=${__value.text}"
                  }
                ]
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 4,
        "w": 24,
        "x": 0,
        "y": 1
      },
      "id": 54,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "9.1.7",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "query": "import \"strings\"\r\nimport \"regexp\"\r\nregex = ${RegEX}\r\n\r\nfields = [\"_time\", \"GameName\", \"user\", \"CarModel\", \"TrackCode\", \"SessionId\", \"SessionTypeName\"]\r\njfields = [\"GameName\", \"user\", \"CarModel\", \"TrackCode\", \"SessionId\", \"SessionTypeName\"]\r\n\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\ndata = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"CurrentLapTime\")\r\n  |> keep(columns: fields)\r\n\r\nmin = data\r\n  |> first(column: \"_time\")\r\n\r\nmax = data\r\n  |> last(column: \"_time\")\r\n\r\njoin(tables: {min: min, max: max}, on: jfields, method: \"inner\")\r\n  |> map(fn: (r) => ({r with SessionId: r.SessionId,\r\n    TrackCode: strings.toLower(v: r.TrackCode),  \r\n    trackShort: regexp.findString(v: r.TrackCode, r: regex)  \r\n    }))\r\n  |> group()  \r\n  \r\n  |> drop(columns: [\"SessionId\",  \"user\" ])\r\n  |> yield()",
          "refId": "A"
        }
      ],
      "title": "Session Info",
      "transformations": [
        {
          "id": "calculateField",
          "options": {
            "alias": "Duration",
            "binary": {
              "left": "Stop",
              "operator": "-",
              "reducer": "sum",
              "right": "Start"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "Duration": true
            },
            "indexByName": {
              "CarModel": 2,
              "GameName": 3,
              "SessionTypeName": 6,
              "TrackCode": 5,
              "_time_max": 1,
              "_time_min": 0,
              "trackShort": 4
            },
            "renameByName": {
              "CarModel": "Car Model",
              "Duration": "",
              "GameName": "Game",
              "SessionTypeName": "Session Type",
              "TrackCode": "Track Name",
              "_time_max": "Stop",
              "_time_min": "Start",
              "trackShort": "Track",
              "user": "User"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "description": "Times are base only in valid laps.",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "center",
            "displayMode": "auto",
            "filterable": false,
            "inspect": false,
            "minWidth": 50
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Track"
            },
            "properties": [
              {
                "id": "unit",
                "value": "lengthm"
              },
              {
                "id": "custom.width",
                "value": 82
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Odometer"
            },
            "properties": [
              {
                "id": "unit",
                "value": "lengthm"
              },
              {
                "id": "custom.width",
                "value": 84
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Avg Lap Time"
            },
            "properties": [
              {
                "id": "unit",
                "value": "clocks"
              },
              {
                "id": "custom.width",
                "value": 125
              },
              {
                "id": "decimals",
                "value": 2
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Max Lap Time"
            },
            "properties": [
              {
                "id": "unit",
                "value": "clocks"
              },
              {
                "id": "custom.width",
                "value": 128
              },
              {
                "id": "decimals",
                "value": 2
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Top(Km/h)"
            },
            "properties": [
              {
                "id": "unit",
                "value": "Speed"
              },
              {
                "id": "decimals",
                "value": 1
              },
              {
                "id": "custom.width",
                "value": 104
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Avg(Km/h)"
            },
            "properties": [
              {
                "id": "decimals",
                "value": 1
              },
              {
                "id": "unit",
                "value": "Speed"
              },
              {
                "id": "custom.width",
                "value": 103
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Total"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 72
              },
              {
                "id": "unit",
                "value": "Laps"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Avg/Max"
            },
            "properties": [
              {
                "id": "unit",
                "value": "s"
              },
              {
                "id": "decimals",
                "value": 3
              },
              {
                "id": "custom.width",
                "value": 103
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "P.Top"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 58
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "P.Low"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 56
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Fuel Used"
            },
            "properties": [
              {
                "id": "unit",
                "value": "litre"
              },
              {
                "id": "custom.width",
                "value": 88
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Fuel/Lap "
            },
            "properties": [
              {
                "id": "unit",
                "value": "litre"
              },
              {
                "id": "custom.width",
                "value": 81
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Fuel Left "
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 76
              },
              {
                "id": "unit",
                "value": "litre"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Best Lap Time"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 134
              },
              {
                "id": "unit",
                "value": "clocks"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "AVG/Best"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 81
              },
              {
                "id": "unit",
                "value": "s"
              },
              {
                "id": "decimals",
                "value": 3
              },
              {
                "id": "color",
                "value": {
                  "mode": "thresholds"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "text",
                      "value": null
                    },
                    {
                      "color": "green",
                      "value": -0.01
                    },
                    {
                      "color": "dark-red",
                      "value": 0.01
                    }
                  ]
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 4,
        "w": 24,
        "x": 0,
        "y": 5
      },
      "id": 60,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": [],
          "reducer": [
            "changeCount"
          ],
          "show": false
        },
        "frameIndex": 9,
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "9.1.7",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "query": "FinalOutput = [\"SessionId\", \"Total Laps\",  \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"CurrentLap\" and r._value > 0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1d, fn: max, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({SessionId: r.SessionId, \"Total Laps\":r._value,  _time:r._time, _field:\"Total Laps\"}))\r\n  |> sort(columns: [\"_value\"], desc: false)\r\n  \r\n  |> keep(columns:FinalOutput)\r\n  \r\nNamedSeries |> yield()",
          "refId": "Total Laps"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "FinalOutput = [\"SessionId\", \"Track_Length\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Track_Length\" and r._value >= 0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1d, fn: max, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({SessionId: r.SessionId, \"Track_Length\":r._value,  _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\nNamedSeries |> yield()",
          "refId": "Track"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "FinalOutput = [\"SessionId\", \"Avg Lap Time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"LapTimePrevious\" and r._value > 0)\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1d, fn: mean, createEmpty: true)\r\n  |> group(columns: [])  \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({SessionId: r.SessionId, \"Avg Lap Time\":r._value, _time:r._time }))\r\n  |> keep(columns:FinalOutput)\r\nNamedSeries |> yield()",
          "refId": "Laps"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "FinalOutput = [\"SessionId\", \"Max Lap Time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"LapTimePrevious\" and r._value > 0)\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false) \r\n  |> aggregateWindow(every: 1d, fn: max, createEmpty: false)\r\n  |> group(columns: [\"_field\"])   \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({SessionId: r.SessionId, \"Max Lap Time\":r._value, _time:r._time}))\r\n  |> keep(columns:FinalOutput)\r\nNamedSeries |> yield()",
          "refId": "MaxLap"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "FinalOutput = [\"SessionId\", \"Top Speed ms\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"SpeedMs\" and r._value > 0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1d, fn: max, createEmpty: false)\r\n  |> group(columns: [\"_field\"])   \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({SessionId: r.SessionId, \"Top Speed ms\":r._value, _time:r._time}))\r\n  |> keep(columns:FinalOutput)\r\nNamedSeries |> yield()",
          "refId": "Top Speed"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "FinalOutput = [\"SessionId\", \"Avg Speed ms\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"SpeedMs\" and r._value > 0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1d, fn: mean, createEmpty: false)\r\n  |> group(columns: [\"_field\"])   \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({SessionId: r.SessionId, \"Avg Speed ms\":r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\nNamedSeries |> yield()",
          "refId": "AVG Speed"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "FinalOutput = [\"SessionId\", \"P.Top\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Session_Position_Overall\" and r._value > 0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1d, fn: min, createEmpty: false)\r\n   |> group(columns: [\"_field\"])   \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({SessionId: r.SessionId, \"P.Top\":r._value, _time:r._time,}))\r\n  |> keep(columns:FinalOutput)\r\nNamedSeries |> yield()",
          "refId": "Top"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "FinalOutput = [\"SessionId\", \"P.Low\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Session_Position_Overall\" and r._value > 0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1d, fn: max, createEmpty: false)\r\n  |> group(columns: [\"_field\"])   \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({SessionId: r.SessionId, \"P.Low\":r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\nNamedSeries |> yield()",
          "refId": "Low"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "FinalOutput = [\"SessionId\", \"MaxFuel\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"FuelData_FuelLeft\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1d, fn: max, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({SessionId: r.SessionId, MaxFuel:r._value, _time:r._time,}))\r\n  |> keep(columns:FinalOutput)\r\nNamedSeries |> yield()",
          "refId": "FuelMax"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "FinalOutput = [\"SessionId\", \"MinFuel\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"FuelData_FuelLeft\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1d, fn: min, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({SessionId: r.SessionId, MinFuel:r._value, _time:r._time,}))\r\n  |> keep(columns:FinalOutput)\r\nNamedSeries |> yield()",
          "refId": "FuelLeft"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "FinalOutput = [\"SessionId\", \"Best Lap Time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Session_PlayerClassSessionBestLapTime\" and r._value >= 0)\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1d, fn: min, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({SessionId: r.SessionId, \"Best Lap Time\":r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\nNamedSeries |> yield()",
          "refId": "BestLap"
        }
      ],
      "title": "Session Stats",
      "transformations": [
        {
          "id": "seriesToColumns",
          "options": {
            "byField": "SessionId"
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "Distance",
            "binary": {
              "left": "Total Laps",
              "operator": "*",
              "reducer": "sum",
              "right": "Track_Length"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "Avg/Max",
            "binary": {
              "left": "Avg Lap Time",
              "operator": "-",
              "reducer": "sum",
              "right": "Max Lap Time"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "AVG/Best",
            "binary": {
              "left": "Avg Lap Time",
              "operator": "-",
              "reducer": "sum",
              "right": "Best Lap Time"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            },
            "replaceFields": false
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "Top(${Speed:text})",
            "binary": {
              "left": "Top Speed ms",
              "operator": "*",
              "reducer": "sum",
              "right": "${Speed}"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "Avg(${Speed:text})",
            "binary": {
              "left": "Avg Speed ms",
              "operator": "*",
              "reducer": "sum",
              "right": "${Speed}"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "Fuel Used",
            "binary": {
              "left": "MinFuel",
              "operator": "-",
              "reducer": "sum",
              "right": "MaxFuel"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "Fuel/Lap ",
            "binary": {
              "left": "Fuel Used",
              "operator": "/",
              "reducer": "sum",
              "right": "Total Laps"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "Avg Speed ms": true,
              "MaxFuel": true,
              "MinFuel": false,
              "SessionId": true,
              "Time": true,
              "Top Speed ms": true
            },
            "indexByName": {
              "AVG/Best": 10,
              "Avg Lap Time": 7,
              "Avg Speed ms": 12,
              "Avg/Max": 9,
              "Best Lap Time": 6,
              "Distance": 5,
              "Fuel Used": 14,
              "Fuel/Lap ": 15,
              "Max Lap Time": 8,
              "MaxFuel": 13,
              "MinFuel": 16,
              "P.Low": 3,
              "P.Top": 2,
              "Time": 0,
              "Top Speed ms": 11,
              "Total Laps": 1,
              "Track_Length": 4
            },
            "renameByName": {
              "Distance": "Odometer",
              "MinFuel": "Fuel Left ",
              "Total Laps": "Total",
              "Track_Length": "Track"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 9
      },
      "id": 11,
      "panels": [],
      "title": "Tyres Position Penalties",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "yellow",
            "mode": "thresholds"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 40,
            "gradientMode": "hue",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "area"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-blue",
                "value": null
              },
              {
                "color": "dark-yellow",
                "value": 70
              },
              {
                "color": "dark-green",
                "value": 80
              },
              {
                "color": "dark-orange",
                "value": 90
              },
              {
                "color": "dark-red",
                "value": 100
              }
            ]
          },
          "unit": "celsius"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "BrakeTemp"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "light-blue",
                      "value": null
                    },
                    {
                      "color": "light-green",
                      "value": 350
                    },
                    {
                      "color": "light-red",
                      "value": 650
                    }
                  ]
                }
              },
              {
                "id": "custom.scaleDistribution",
                "value": {
                  "type": "linear"
                }
              },
              {
                "id": "custom.thresholdsStyle",
                "value": {
                  "mode": "dashed"
                }
              },
              {
                "id": "custom.fillOpacity",
                "value": 0
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 0,
        "y": 10
      },
      "id": 41,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "alias": "Brake",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"TyreData_Front_Left_BrakeTemp\"  and r._value > 0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Brake\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "BrakeTemp",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_TyreData_Front_Left_BrakeTemp"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Core",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "FinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"TyreData_Front_Left_CenterTemp\" and r._value > 0)\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Tyre Core\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()\r\n ",
          "refId": "TyreCore",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_TyreData_Front_Left_CenterTemp"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Front Left Temp",
      "transformations": [],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "yellow",
            "mode": "thresholds"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 40,
            "gradientMode": "hue",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "area"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-blue",
                "value": null
              },
              {
                "color": "dark-yellow",
                "value": 70
              },
              {
                "color": "dark-green",
                "value": 80
              },
              {
                "color": "dark-orange",
                "value": 90
              },
              {
                "color": "dark-red",
                "value": 100
              }
            ]
          },
          "unit": "celsius"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "BrakeTemp"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "light-blue",
                      "value": null
                    },
                    {
                      "color": "light-green",
                      "value": 350
                    },
                    {
                      "color": "light-red",
                      "value": 650
                    }
                  ]
                }
              },
              {
                "id": "custom.scaleDistribution",
                "value": {
                  "type": "linear"
                }
              },
              {
                "id": "custom.thresholdsStyle",
                "value": {
                  "mode": "dashed"
                }
              },
              {
                "id": "custom.fillOpacity",
                "value": 0
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 5,
        "y": 10
      },
      "id": 36,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "alias": "Core",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\n\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"TyreData_Front_Right_CenterTemp\"  and r._value > 0)\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Tyre Core\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()\r\n ",
          "refId": "TyreCore",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_TyreData_Front_Left_CenterTemp"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Brake",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"TyreData_Front_Right_BrakeTemp\"  and r._value > 0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Brake\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "BrakeTemp",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_TyreData_Front_Left_BrakeTemp"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Front Right Temp",
      "transformations": [],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-RdYlGr"
          },
          "decimals": 0,
          "mappings": [],
          "min": 1,
          "noValue": "0",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 2,
        "x": 10,
        "y": 10
      },
      "id": 22,
      "interval": "1m",
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "center",
        "orientation": "vertical",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {
          "titleSize": 1
        },
        "textMode": "value"
      },
      "pluginVersion": "9.1.7",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Session_Position_Overall\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1m, fn: last, createEmpty: false)\r\n  |> group(columns: [\"SessionId\"])\r\n\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Position\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_Session_Position_Overall"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Position",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-RdYlGr"
          },
          "decimals": 0,
          "mappings": [],
          "min": 1,
          "noValue": "0",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 2,
        "x": 12,
        "y": 10
      },
      "id": 24,
      "interval": "1h",
      "maxDataPoints": 150,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "center",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {
          "titleSize": 1
        },
        "textMode": "auto"
      },
      "pluginVersion": "9.1.7",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Session_NumCars_Overall\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: ${SessionLen}s, fn: last, createEmpty: false)\r\n  |> group(columns: [\"SessionId\"])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Opponents\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_Session_NumCars_Overall"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Opponents ",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "orange",
            "mode": "thresholds"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 12,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "area"
            }
          },
          "decimals": 2,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "red",
                "value": null
              },
              {
                "color": "green",
                "value": 26
              },
              {
                "color": "semi-dark-red",
                "value": 27
              }
            ]
          },
          "unit": "pressurepsi"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Tyre"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "text",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.axisPlacement",
                "value": "hidden"
              },
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                }
              },
              {
                "id": "min",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Wear"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "max"
              },
              {
                "id": "custom.thresholdsStyle",
                "value": {
                  "mode": "dashed"
                }
              },
              {
                "id": "min"
              },
              {
                "id": "custom.scaleDistribution",
                "value": {
                  "type": "linear"
                }
              },
              {
                "id": "color",
                "value": {
                  "mode": "thresholds"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "light-yellow",
                      "value": 50
                    },
                    {
                      "color": "semi-dark-orange",
                      "value": 70
                    },
                    {
                      "color": "semi-dark-red",
                      "value": 80
                    },
                    {
                      "color": "dark-red",
                      "value": 90
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "x10"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "hidden"
              },
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": true,
                  "tooltip": true,
                  "viz": true
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 14,
        "y": 10
      },
      "id": 8,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "alias": "Tyre",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"TyreData_Front_Left_Pressure\" and r._value >= 0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Tyre\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "TyrePressure",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_FrontLeftPressure"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Wear",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"TyreData_Front_Left_PercentWear\" and r._value > 0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n      \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Wear\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "TyreWear",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_FrontLeftPercentWear"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Front Left (PSI-Wear)",
      "transformations": [
        {
          "id": "calculateField",
          "options": {
            "alias": "x10",
            "binary": {
              "left": "Tyre",
              "operator": "*",
              "reducer": "sum",
              "right": "10"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "PSI",
            "binary": {
              "left": "x10",
              "operator": "/",
              "reducer": "sum",
              "right": "70.3070"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            },
            "replaceFields": false
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "Tyre": true,
              "x10": true
            },
            "indexByName": {},
            "renameByName": {}
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "orange",
            "mode": "thresholds"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 12,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "area"
            }
          },
          "decimals": 2,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "red",
                "value": null
              },
              {
                "color": "green",
                "value": 26
              },
              {
                "color": "semi-dark-red",
                "value": 27
              }
            ]
          },
          "unit": "pressurepsi"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Tyre"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "text",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.axisPlacement",
                "value": "hidden"
              },
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                }
              },
              {
                "id": "min",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Wear"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "max"
              },
              {
                "id": "custom.thresholdsStyle",
                "value": {
                  "mode": "dashed"
                }
              },
              {
                "id": "min"
              },
              {
                "id": "custom.scaleDistribution",
                "value": {
                  "type": "linear"
                }
              },
              {
                "id": "color",
                "value": {
                  "mode": "thresholds"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "light-yellow",
                      "value": 50
                    },
                    {
                      "color": "semi-dark-orange",
                      "value": 70
                    },
                    {
                      "color": "semi-dark-red",
                      "value": 80
                    },
                    {
                      "color": "dark-red",
                      "value": 90
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "x10"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "hidden"
              },
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": true,
                  "tooltip": true,
                  "viz": true
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 19,
        "y": 10
      },
      "id": 61,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "alias": "Tyre",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"TyreData_Front_Right_Pressure\" and r._value >= 0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Tyre\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "TyrePressure",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_FrontLeftPressure"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Wear",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"TyreData_Front_Right_PercentWear\" and r._value > 0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n      \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Wear\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "TyreWear",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_FrontLeftPercentWear"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Front Right (PSI-Wear)",
      "transformations": [
        {
          "id": "calculateField",
          "options": {
            "alias": "x10",
            "binary": {
              "left": "Tyre",
              "operator": "*",
              "reducer": "sum",
              "right": "10"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "PSI",
            "binary": {
              "left": "x10",
              "operator": "/",
              "reducer": "sum",
              "right": "70.3070"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            },
            "replaceFields": false
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "Tyre": true,
              "x10": true
            },
            "indexByName": {},
            "renameByName": {}
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-RdYlGr"
          },
          "decimals": 0,
          "mappings": [],
          "min": -1,
          "noValue": "0",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 2,
        "x": 10,
        "y": 14
      },
      "id": 23,
      "interval": "1h",
      "maxDataPoints": 150,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.1.7",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Penalties_CutTrackWarnings\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: ${SessionLen}s, fn: max, createEmpty: false)\r\n\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Cuts\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_CutTrackWarnings"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Cuts",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-RdYlGr"
          },
          "decimals": 0,
          "mappings": [],
          "min": -1,
          "noValue": "0",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 2,
        "x": 12,
        "y": 14
      },
      "id": 45,
      "interval": "1h",
      "maxDataPoints": 150,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.1.7",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Penalties_Incidents\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: ${SessionLen}s, fn: max, createEmpty: false)\r\n\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Incidents\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_CutTrackWarnings"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Incidents",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "yellow",
            "mode": "thresholds"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 40,
            "gradientMode": "hue",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "area"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-blue",
                "value": null
              },
              {
                "color": "dark-yellow",
                "value": 70
              },
              {
                "color": "dark-green",
                "value": 80
              },
              {
                "color": "dark-orange",
                "value": 90
              },
              {
                "color": "dark-red",
                "value": 100
              }
            ]
          },
          "unit": "celsius"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "BrakeTemp"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "light-blue",
                      "value": null
                    },
                    {
                      "color": "light-green",
                      "value": 350
                    },
                    {
                      "color": "light-red",
                      "value": 650
                    }
                  ]
                }
              },
              {
                "id": "custom.scaleDistribution",
                "value": {
                  "type": "linear"
                }
              },
              {
                "id": "custom.thresholdsStyle",
                "value": {
                  "mode": "dashed"
                }
              },
              {
                "id": "custom.fillOpacity",
                "value": 0
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 0,
        "y": 15
      },
      "id": 39,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "alias": "Core",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"TyreData_Rear_Left_CenterTemp\"  and r._value > 0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Tyre Core\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()\r\n ",
          "refId": "TyreCore",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_TyreData_Front_Left_CenterTemp"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Brake",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"TyreData_Rear_Left_BrakeTemp\"  and r._value > 0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Brake\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "BrakeTemp",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_TyreData_Front_Left_BrakeTemp"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Rear Left Temp",
      "transformations": [],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "yellow",
            "mode": "thresholds"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 40,
            "gradientMode": "hue",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "area"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-blue",
                "value": null
              },
              {
                "color": "dark-yellow",
                "value": 70
              },
              {
                "color": "dark-green",
                "value": 80
              },
              {
                "color": "dark-orange",
                "value": 90
              },
              {
                "color": "dark-red",
                "value": 100
              }
            ]
          },
          "unit": "celsius"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "BrakeTemp"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "light-blue",
                      "value": null
                    },
                    {
                      "color": "light-green",
                      "value": 350
                    },
                    {
                      "color": "light-red",
                      "value": 650
                    }
                  ]
                }
              },
              {
                "id": "custom.scaleDistribution",
                "value": {
                  "type": "linear"
                }
              },
              {
                "id": "custom.thresholdsStyle",
                "value": {
                  "mode": "dashed"
                }
              },
              {
                "id": "custom.fillOpacity",
                "value": 0
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 5,
        "y": 15
      },
      "id": 40,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "alias": "Core",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"TyreData_Rear_Right_CenterTemp\"  and r._value > 0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Tyre Core\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()\r\n ",
          "refId": "TyreCore",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_TyreData_Front_Left_CenterTemp"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Brake",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"TyreData_Rear_Right_BrakeTemp\"  and r._value > 0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Brake\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "BrakeTemp",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_TyreData_Front_Left_BrakeTemp"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Rear Right Temp",
      "transformations": [],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "orange",
            "mode": "thresholds"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 12,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "area"
            }
          },
          "decimals": 2,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "red",
                "value": null
              },
              {
                "color": "green",
                "value": 26
              },
              {
                "color": "semi-dark-red",
                "value": 27
              }
            ]
          },
          "unit": "pressurepsi"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Tyre"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "text",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.axisPlacement",
                "value": "hidden"
              },
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                }
              },
              {
                "id": "min",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Wear"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "max"
              },
              {
                "id": "custom.thresholdsStyle",
                "value": {
                  "mode": "dashed"
                }
              },
              {
                "id": "min"
              },
              {
                "id": "custom.scaleDistribution",
                "value": {
                  "type": "linear"
                }
              },
              {
                "id": "color",
                "value": {
                  "mode": "thresholds"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "light-yellow",
                      "value": 50
                    },
                    {
                      "color": "semi-dark-orange",
                      "value": 70
                    },
                    {
                      "color": "semi-dark-red",
                      "value": 80
                    },
                    {
                      "color": "dark-red",
                      "value": 90
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "x10"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "hidden"
              },
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": true,
                  "tooltip": true,
                  "viz": true
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 14,
        "y": 15
      },
      "id": 62,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "alias": "Tyre",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "FinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"TyreData_Rear_Left_Pressure\" and r._value >= 0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Tyre\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "TyrePressure",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_FrontLeftPressure"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Wear",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"TyreData_Rear_Left_PercentWear\" and r._value > 0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n      \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Wear\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "TyreWear",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_FrontLeftPercentWear"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Rear Left (PSI-Wear)",
      "transformations": [
        {
          "id": "calculateField",
          "options": {
            "alias": "x10",
            "binary": {
              "left": "Tyre",
              "operator": "*",
              "reducer": "sum",
              "right": "10"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "PSI",
            "binary": {
              "left": "x10",
              "operator": "/",
              "reducer": "sum",
              "right": "70.3070"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            },
            "replaceFields": false
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "Tyre": true,
              "x10": true
            },
            "indexByName": {},
            "renameByName": {}
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "orange",
            "mode": "thresholds"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 12,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "area"
            }
          },
          "decimals": 2,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "red",
                "value": null
              },
              {
                "color": "green",
                "value": 26
              },
              {
                "color": "semi-dark-red",
                "value": 27
              }
            ]
          },
          "unit": "pressurepsi"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Tyre"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "text",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.axisPlacement",
                "value": "hidden"
              },
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                }
              },
              {
                "id": "min",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Wear"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "max"
              },
              {
                "id": "custom.thresholdsStyle",
                "value": {
                  "mode": "dashed"
                }
              },
              {
                "id": "min"
              },
              {
                "id": "custom.scaleDistribution",
                "value": {
                  "type": "linear"
                }
              },
              {
                "id": "color",
                "value": {
                  "mode": "thresholds"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "light-yellow",
                      "value": 50
                    },
                    {
                      "color": "semi-dark-orange",
                      "value": 70
                    },
                    {
                      "color": "semi-dark-red",
                      "value": 80
                    },
                    {
                      "color": "dark-red",
                      "value": 90
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "x10"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "hidden"
              },
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": true,
                  "tooltip": true,
                  "viz": true
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 19,
        "y": 15
      },
      "id": 63,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "alias": "Tyre",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"TyreData_Rear_Right_Pressure\" and r._value >= 0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Tyre\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "TyrePressure",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_FrontLeftPressure"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Wear",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"TyreData_Rear_Right_PercentWear\" and r._value > 0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n      \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Wear\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "TyreWear",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_FrontLeftPercentWear"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Rear Right (PSI-Wear)",
      "transformations": [
        {
          "id": "calculateField",
          "options": {
            "alias": "x10",
            "binary": {
              "left": "Tyre",
              "operator": "*",
              "reducer": "sum",
              "right": "10"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "PSI",
            "binary": {
              "left": "x10",
              "operator": "/",
              "reducer": "sum",
              "right": "70.3070"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            },
            "replaceFields": false
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "Tyre": true,
              "x10": true
            },
            "indexByName": {},
            "renameByName": {}
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-RdYlGr"
          },
          "decimals": 0,
          "mappings": [],
          "min": -1,
          "noValue": "0",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 2,
        "x": 10,
        "y": 17
      },
      "id": 46,
      "interval": "1h",
      "maxDataPoints": 150,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "9.1.7",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Penalties_Total\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: ${SessionLen}s, fn: max, createEmpty: false)\r\n\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Penalties\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_CutTrackWarnings"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Penalties",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "mappings": [],
          "noValue": "0",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "red",
                "value": null
              },
              {
                "color": "orange",
                "value": 0.1
              },
              {
                "color": "yellow",
                "value": 0.25
              },
              {
                "color": "#88bf69",
                "value": 0.5
              },
              {
                "color": "dark-green",
                "value": 0.6
              }
            ]
          },
          "unit": "percentunit"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 2,
        "x": 12,
        "y": 17
      },
      "id": 51,
      "interval": "1m",
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "center",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "/^Fuel%$/",
          "values": false
        },
        "textMode": "value"
      },
      "pluginVersion": "9.1.7",
      "targets": [
        {
          "alias": "Tyre",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"FuelData_FuelCapacity\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1m, fn: max, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"FuelCapacity\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "FuelCapacity",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_FrontLeftPressure"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Wear",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"FuelData_FuelLeft\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1m, fn: max, createEmpty: false)\r\n      \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"FuelLeft\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "FuelLeft",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_FrontLeftPercentWear"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Fuel %",
      "transformations": [
        {
          "id": "calculateField",
          "options": {
            "alias": "Fuel%",
            "binary": {
              "left": "FuelLeft",
              "operator": "/",
              "reducer": "sum",
              "right": "FuelCapacity"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            },
            "replaceFields": true
          }
        }
      ],
      "transparent": true,
      "type": "stat"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 20
      },
      "id": 4,
      "panels": [],
      "title": "Time Speed Inputs",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "purple",
            "mode": "fixed"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "Lap time",
            "axisPlacement": "left",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 51,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [
            {
              "options": {
                "1": {
                  "color": "green",
                  "index": 0
                },
                "2": {
                  "color": "purple",
                  "index": 1
                },
                "3": {
                  "color": "yellow",
                  "index": 2
                },
                "4": {
                  "color": "#a5f700",
                  "index": 3
                },
                "5": {
                  "color": "semi-dark-blue",
                  "index": 4
                },
                "6": {
                  "color": "#ba05f7",
                  "index": 5
                },
                "7": {
                  "color": "#0affb9",
                  "index": 6
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "clocks"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "Lap"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "custom.axisLabel",
                "value": "Laps Num"
              },
              {
                "id": "unit",
                "value": "none"
              },
              {
                "id": "custom.scaleDistribution",
                "value": {
                  "type": "linear"
                }
              },
              {
                "id": "decimals",
                "value": 0
              },
              {
                "id": "custom.lineWidth",
                "value": 2
              },
              {
                "id": "custom.fillOpacity",
                "value": 0
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-yellow",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 5,
        "w": 10,
        "x": 0,
        "y": 21
      },
      "id": 18,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "alias": "Last Lap",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"LapTimePrevious\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Lap Valid Time\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "LapTime",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_LapTimePrevious"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Lap",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"CurrentLap\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Lap #\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Lap",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_CurrentLap"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Last Lap",
      "transparent": true,
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "#be60f2",
            "mode": "fixed"
          },
          "decimals": 0,
          "mappings": [],
          "noValue": "0",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "light-red",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 4,
        "x": 10,
        "y": 21
      },
      "id": 6,
      "interval": "1h",
      "maxDataPoints": 250,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "center",
        "orientation": "vertical",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {
          "titleSize": 10,
          "valueSize": 150
        },
        "textMode": "value_and_name"
      },
      "pluginVersion": "9.1.7",
      "targets": [
        {
          "alias": "maxspeedms",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1m"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"SpeedMs\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1d, fn: max, createEmpty: false)\r\n  |> group(columns: [\"SessionId\"])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"maxspeedms\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_SpeedMs"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Top Speed",
      "transformations": [
        {
          "id": "calculateField",
          "options": {
            "alias": "${Speed:text}",
            "binary": {
              "left": "_value",
              "operator": "*",
              "reducer": "sum",
              "right": "${Speed}"
            },
            "mode": "binary",
            "reduce": {
              "include": [
                "laps_cc.last"
              ],
              "reducer": "sum"
            },
            "replaceFields": true
          }
        }
      ],
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "clocks"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "B"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Delta Behind"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "A"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Delta Front"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 5,
        "w": 10,
        "x": 14,
        "y": 21
      },
      "id": 20,
      "options": {
        "legend": {
          "calcs": [
            "mean"
          ],
          "displayMode": "list",
          "placement": "right",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "alias": "Delta Front",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Session_Delta_Front\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n  |> group(columns: [\"SessionId\"])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Delta_Front\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_DeltaFront"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Delta Behind",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Session_Delta_Behind\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n  |> group(columns: [\"SessionId\"])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Delta_Behind\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "B",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_DeltaBehind"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Deltas",
      "transparent": true,
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "left",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 20,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "SpeedMs"
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": true,
                  "tooltip": true,
                  "viz": true
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Sector"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "displayName",
                "value": "Sector"
              },
              {
                "id": "max",
                "value": 3
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-yellow",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.fillOpacity",
                "value": 0
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "PitLimitMs"
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": true,
                  "tooltip": true,
                  "viz": true
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Km/h"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Lap"
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": true,
                  "tooltip": false,
                  "viz": true
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "X"
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": true,
                  "tooltip": true,
                  "viz": true
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 24,
        "x": 0,
        "y": 26
      },
      "id": 16,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.4.7",
      "targets": [
        {
          "alias": "maxspeedms",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"SpeedMs\" and r._value > 0)\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"SpeedMs\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "SpeedMs",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_SpeedMs"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Section",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"PitData_PitSpeedLimit\"  and r._value > 0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"PitLimitMs\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "PitLimit",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_Sector"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Session_Sector\" and r._value > 0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Sector\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Sector"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "import \"date\"\r\nFinalOutput = [\"Lap\", \"_time\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"CurrentLap\"  )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: false)\r\n  |> group(columns: [])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({ SessionId: r.SessionId , Lap:r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Lap"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "import \"date\"\r\nFinalOutput = [\"X\", \"_time\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"DistanceRoundTrack\"  )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: false)\r\n  |> group(columns: [])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({ SessionId: r.SessionId , X:r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Distance"
        }
      ],
      "title": "Speed",
      "transformations": [
        {
          "id": "calculateField",
          "options": {
            "alias": "${Speed:text}",
            "binary": {
              "left": "SpeedMs",
              "operator": "*",
              "reducer": "sum",
              "right": "${Speed}"
            },
            "mode": "binary",
            "reduce": {
              "include": [
                "laps_cc.last"
              ],
              "reducer": "sum"
            },
            "replaceFields": false
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "Pit Limit",
            "binary": {
              "left": "PitLimitMs",
              "operator": "*",
              "reducer": "sum",
              "right": "${Speed}"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        }
      ],
      "transparent": true,
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 2,
            "gradientMode": "scheme",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "percentunit"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "SteeringAngle"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "unit",
                "value": "none"
              },
              {
                "id": "custom.fillOpacity",
                "value": 22
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "super-light-orange",
                  "mode": "fixed",
                  "seriesBy": "min"
                }
              },
              {
                "id": "displayName",
                "value": "SteeringAngle"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "Brake"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              },
              {
                "id": "displayName",
                "value": "Brake"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "Throttle"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              },
              {
                "id": "displayName",
                "value": "Throttle"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "Clutch"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Clutch"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "orange",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.fillOpacity",
                "value": 2
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "Handbrake"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Handbrake"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Lap"
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": true,
                  "tooltip": false,
                  "viz": true
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "X"
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": true,
                  "tooltip": true,
                  "viz": true
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 9,
        "w": 24,
        "x": 0,
        "y": 32
      },
      "id": 2,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "alias": "Brake",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "autogen",
          "query": "import \"date\"\r\nFinalOutput = [\"Brake\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Brake\"  )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n  |> group(columns: [\"SessionId\"])\r\n\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({ Brake:r._value, _time:r._time }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Brake",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_Brake"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Throttle",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "autogen",
          "query": "import \"date\"\r\nFinalOutput = [\"Throttle\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Throttle\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n  |> group(columns: [\"SessionId\"])\r\n  \r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({Throttle:r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Throttle",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_Throttle"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Steer",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "linear"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"SteeringAngle\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"SteeringAngle\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1s, fn: mean, createEmpty: false)\r\n  |> group(columns: [\"SessionId\"])\r\n  \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({SteeringAngle:r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "SteeringAngle",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_SteeringAngle"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Throttle",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "autogen",
          "query": "import \"date\"\r\nFinalOutput = [\"Clutch\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Clutch\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n  |> group(columns: [\"SessionId\"])\r\n\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({Clutch:r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Clutch",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_Throttle"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Throttle",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "autogen",
          "query": "import \"date\"\r\nFinalOutput = [\"Handbrake\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Handbrake\" and r._value > 0)\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n  |> group(columns: [\"SessionId\"])\r\n\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({Handbrake:r._value, _time:r._time,}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Handbrake",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_Throttle"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": []
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "import \"date\"\r\nFinalOutput = [\"Lap\", \"_time\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"CurrentLap\"  )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n  |> group(columns: [])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({ SessionId: r.SessionId , Lap:r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Lap"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "import \"date\"\r\nFinalOutput = [\"X\", \"_time\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"DistanceRoundTrack\"  )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n  |> group(columns: [])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({ SessionId: r.SessionId , X:r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "X"
        }
      ],
      "title": "Inputs",
      "transparent": true,
      "type": "timeseries"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 41
      },
      "id": 52,
      "panels": [],
      "title": "Engine Data ",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "RPMs",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 0,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "Gear"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "displayName",
                "value": "Gear"
              },
              {
                "id": "custom.axisLabel",
                "value": "Gears"
              },
              {
                "id": "custom.lineInterpolation",
                "value": "stepBefore"
              },
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "0": {
                        "color": "text",
                        "index": 1,
                        "text": "Neutral"
                      },
                      "-1": {
                        "color": "dark-purple",
                        "index": 0,
                        "text": "Reverse"
                      }
                    },
                    "type": "value"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "RPM"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "RPM"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "MaxRPM"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Max RPM"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 24,
        "x": 0,
        "y": 42
      },
      "id": 35,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field =~ /EngineData_EngineRpm|Rpms/  )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n  |> group(columns: [\"SessionId\"])\r\n  |> set(key: \"_field\", value: \"EngineData_EngineRpm\")\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"EngineData_EngineRpm\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "RPM",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_Rpms"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Gear",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Gear\"  )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1s, fn: last, createEmpty: false)\r\n  |> group(columns: [\"SessionId\"])\r\n  |> set(key: \"_field\", value: \"Gear\")\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Gear\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Gear",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_Gear"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Max",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"EngineData_MaxEngineRpm\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n  |> group(columns: [\"SessionId\"])\r\n  |> set(key: \"_field\", value: \"EngineData_MaxEngineRpm\")\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"EngineData_MaxEngineRpm\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "MaxRPM",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_EngineData_MaxEngineRpm"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Engine RPMs",
      "transformations": [],
      "transparent": true,
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds",
            "seriesBy": "last"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "series",
            "axisLabel": "%",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "area"
            }
          },
          "decimals": 0,
          "mappings": [],
          "max": 1,
          "noValue": "0",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "super-light-yellow"
              },
              {
                "color": "light-blue",
                "value": 0
              },
              {
                "color": "dark-green",
                "value": 0.55
              },
              {
                "color": "dark-red",
                "value": 0.9
              }
            ]
          },
          "unit": "percentunit"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 24,
        "x": 0,
        "y": 48
      },
      "id": 47,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field =~ /EngineData_EngineRpm|Rpms/  )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n  |> group(columns: [\"SessionId\"])\r\n  |> set(key: \"_field\", value: \"EngineData_EngineRpm\")\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"EngineData_EngineRpm\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "RPM",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_Rpms"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Max",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"EngineData_MaxEngineRpm\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n  |> group(columns: [\"SessionId\"])\r\n  |> set(key: \"_field\", value: \"EngineData_MaxEngineRpm\")\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"EngineData_MaxEngineRpm\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "MaxRPM",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_EngineData_MaxEngineRpm"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Engine RPM %",
      "transformations": [
        {
          "id": "calculateField",
          "options": {
            "alias": "%RPM",
            "binary": {
              "left": "_value 1",
              "operator": "/",
              "reducer": "sum",
              "right": "_value 2"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            },
            "replaceFields": true
          }
        }
      ],
      "transparent": true,
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "yellow",
            "mode": "thresholds"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 12,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "area"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-blue"
              },
              {
                "color": "dark-yellow",
                "value": 70
              },
              {
                "color": "dark-green",
                "value": 80
              },
              {
                "color": "dark-orange",
                "value": 100
              },
              {
                "color": "dark-red",
                "value": 143
              }
            ]
          },
          "unit": "celsius"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "EngineOilTemp"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "blue"
                    },
                    {
                      "color": "light-green",
                      "value": 82
                    },
                    {
                      "color": "orange",
                      "value": 104
                    },
                    {
                      "color": "red",
                      "value": 140
                    }
                  ]
                }
              },
              {
                "id": "custom.scaleDistribution",
                "value": {
                  "type": "linear"
                }
              },
              {
                "id": "custom.thresholdsStyle",
                "value": {
                  "mode": "dashed"
                }
              },
              {
                "id": "displayName",
                "value": "Oil"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "WaterTemp"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Water"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 9,
        "x": 0,
        "y": 54
      },
      "id": 48,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "alias": "Core",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"EngineData_EngineWaterTemp\" and r._value >=0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"EngineData_EngineWaterTemp\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()\r\n ",
          "refId": "WaterTemp",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_TyreData_Front_Left_CenterTemp"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Brake",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"EngineData_EngineOilTemp\" and r._value >= 0)\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"EngineData_EngineOilTemp\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "EngineOilTemp",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_TyreData_Front_Left_BrakeTemp"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Engine Temps",
      "transformations": [],
      "transparent": true,
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "orange",
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 12,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "min": 0,
          "noValue": "0",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "red"
              },
              {
                "color": "green",
                "value": 26
              },
              {
                "color": "semi-dark-red",
                "value": 27
              }
            ]
          },
          "unit": "litre"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 8,
        "x": 9,
        "y": 54
      },
      "id": 50,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "alias": "Tyre",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"FuelData_FuelCapacity\" and r._value >= 0 )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"FuelCapacity\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "FuelCapacity",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_FrontLeftPressure"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Wear",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"FuelData_FuelLeft\" and r._value >= 0)\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n      \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"FuelLeft\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "FuelLeft",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_FrontLeftPercentWear"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Fuel",
      "transformations": [],
      "transparent": true,
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "orange",
            "mode": "continuous-YlBl"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 12,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "noValue": "0",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "red"
              },
              {
                "color": "green",
                "value": 26
              },
              {
                "color": "semi-dark-red",
                "value": 27
              }
            ]
          },
          "unit": "pressurepsi"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "Oil"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "color",
                "value": {
                  "mode": "continuous-GrYlRd"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 7,
        "x": 17,
        "y": 54
      },
      "id": 49,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "alias": "Tyre",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"EngineData_EngineOilPressure\"and r._value >= 0)\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Oil\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Oil",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_FrontLeftPressure"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Wear",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"FuelData_FuelPressure\" and r._value >= 0)\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n      \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Fuel\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Fuel",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_FrontLeftPercentWear"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Engine PSI",
      "transformations": [],
      "transparent": true,
      "type": "timeseries"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 60
      },
      "id": 55,
      "panels": [],
      "title": "Weather Distance Flags",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 16,
            "gradientMode": "opacity",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 2,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "celsius"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "Rain"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "unit",
                "value": "humidity"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 4,
        "w": 24,
        "x": 0,
        "y": 61
      },
      "id": 31,
      "options": {
        "legend": {
          "calcs": [
            "min",
            "mean",
            "max"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "alias": "Ambient Temp",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Conditions_Temperature_Ambient\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Ambient\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Ambient",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_AmbientTemperature"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Track Temp",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Conditions_Temperature_Track\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Track\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Track",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_TrackTemperature"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Conditions_RainDensity\" and r._value > 0)\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Rain Density\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Rain"
        }
      ],
      "title": "Temperature Conditions",
      "transparent": true,
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "fixed"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "hidden",
            "fillOpacity": 100,
            "gradientMode": "opacity",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineWidth": 1,
            "scaleDistribution": {
              "type": "linear"
            }
          },
          "decimals": 0,
          "mappings": [],
          "noValue": "0",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Flag"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "1": {
                        "color": "dark-green",
                        "index": 0,
                        "text": "Green"
                      },
                      "2": {
                        "color": "dark-yellow",
                        "index": 1,
                        "text": "Yellow"
                      },
                      "4": {
                        "color": "dark-blue",
                        "index": 2,
                        "text": "Blue"
                      },
                      "5": {
                        "color": "#ffffff",
                        "index": 3,
                        "text": "White"
                      },
                      "7": {
                        "color": "#ffffff",
                        "index": 4,
                        "text": "White"
                      },
                      "8": {
                        "color": "#07f5ed",
                        "index": 5,
                        "text": "Unknown"
                      },
                      "9": {
                        "color": "#0d9f9a",
                        "index": 6,
                        "text": "Unknown"
                      }
                    },
                    "type": "value"
                  }
                ]
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 65
      },
      "id": 33,
      "options": {
        "barRadius": 0.1,
        "barWidth": 0.83,
        "colorByField": "Flag",
        "fullHighlight": true,
        "groupWidth": 0.1,
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "orientation": "auto",
        "showValue": "never",
        "stacking": "none",
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        },
        "xField": "Flag",
        "xTickLabelMaxLength": 1,
        "xTickLabelRotation": -90,
        "xTickLabelSpacing": 100
      },
      "pluginVersion": "10.0.2",
      "targets": [
        {
          "$$hashKey": "object:24",
          "aggregation": "Last",
          "alias": "Flag",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "decimals": 2,
          "displayAliasType": "Warning / Critical",
          "displayType": "Regular",
          "displayValueWithAlias": "Never",
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "FinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Session_Flag\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value+1.0, _time:r._time, _field:\"Flag\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_Flag"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": [],
          "units": "none",
          "valueHandler": "Number Threshold"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "FinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"CurrentLap\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Lap\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "B"
        }
      ],
      "title": "Flag",
      "transformations": [],
      "transparent": true,
      "type": "barchart"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "orange",
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 12,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "min": 0,
          "noValue": "0",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "red"
              },
              {
                "color": "green",
                "value": 26
              },
              {
                "color": "semi-dark-red",
                "value": 27
              }
            ]
          },
          "unit": "lengthm"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "%"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "unit",
                "value": "percentunit"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 65
      },
      "id": 56,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "alias": "Tyre",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "none"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"DistanceRoundTrack\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Distance\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Distance",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_FrontLeftPressure"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "max"
              }
            ]
          ],
          "tags": []
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "import \"date\"\r\nFinalOutput = [\"_field\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Track_Length\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"CarModel\", \"_field\", \"_time\", \"_value\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> group(columns: [\"_field\"])\r\n  |> aggregateWindow(every: 1s, fn: max, createEmpty: false)\r\n     \r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({_value:r._value, _time:r._time, _field:\"Track Length\"}))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Track_Length"
        }
      ],
      "title": "Distance in Meters",
      "transformations": [
        {
          "id": "calculateField",
          "options": {
            "alias": "%",
            "binary": {
              "left": "Distance",
              "operator": "/",
              "reducer": "sum",
              "right": "Track Length"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        }
      ],
      "transparent": true,
      "type": "timeseries"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 73
      },
      "id": 57,
      "panels": [],
      "title": "Work In Progress",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "fixed"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "scheme",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Yaw"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Pitch"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-orange",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Roll"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Lap"
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": true,
                  "tooltip": false,
                  "viz": true
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "X"
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": true,
                  "tooltip": true,
                  "viz": true
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 74
      },
      "id": 66,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "alias": "Brake",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "autogen",
          "query": "import \"date\"\r\nFinalOutput = [ \"Pitch\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Position_Orientation_Pitch\"  )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1s, fn: mean, createEmpty: false)\r\n  |> group(columns: [])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({ SessionId: r.SessionId , Pitch:r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Pitch",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_Brake"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Brake",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "autogen",
          "query": "import \"date\"\r\nFinalOutput = [\"Roll\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Position_Orientation_Roll\"  )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1s, fn: mean, createEmpty: false)\r\n  |> group(columns: [])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({ SessionId: r.SessionId , Roll:r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Roll",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_Brake"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Brake",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "autogen",
          "query": "import \"date\"\r\nFinalOutput = [ \"Yaw\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Position_Orientation_Yaw\"  )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: 1s, fn: mean, createEmpty: false)\r\n  |> group(columns: [])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({ SessionId: r.SessionId , Yaw:r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Yaw",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_Brake"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": []
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "import \"date\"\r\nFinalOutput = [\"Lap\", \"_time\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"CurrentLap\"  )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: false)\r\n  |> group(columns: [])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({ SessionId: r.SessionId , Lap:r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Lap"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "import \"date\"\r\nFinalOutput = [\"X\", \"_time\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"DistanceRoundTrack\"  )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: false)\r\n  |> group(columns: [])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({ SessionId: r.SessionId , X:r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "A"
        }
      ],
      "title": "Orientation",
      "transformations": [
        {
          "id": "seriesToColumns",
          "options": {
            "byField": "_time"
          }
        }
      ],
      "transparent": true,
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "-- Dashboard --"
      },
      "description": "",
      "gridPos": {
        "h": 8,
        "w": 6,
        "x": 12,
        "y": 74
      },
      "id": 70,
      "interval": "1s",
      "options": {
        "ReferenceLines": [],
        "border": {
          "color": "yellow",
          "size": 0
        },
        "fieldSets": [
          {
            "col": 2,
            "color": "#37872D",
            "colorCol": -1,
            "dotSize": 2,
            "hidden": false,
            "lineSize": 1,
            "lineType": "simple",
            "polynomialOrder": 3,
            "sizeCol": -1
          },
          {
            "col": 1,
            "color": "#FA6400",
            "colorCol": -1,
            "dotSize": 2,
            "hidden": false,
            "lineSize": 1,
            "lineType": "simple",
            "polynomialOrder": 3,
            "sizeCol": -1
          }
        ],
        "grid": {
          "color": "gray"
        },
        "label": {
          "col": -1,
          "color": "#CCC",
          "textSize": 2
        },
        "legend": {
          "show": false,
          "size": 3
        },
        "xAxis": {
          "col": 5,
          "inverted": false
        },
        "xAxisExtents": {},
        "xAxisTitle": {
          "color": "#969696",
          "fontColor": "#8e8e8e",
          "fontSize": 3,
          "logScale": false,
          "rotated": false,
          "text": "Track Distance",
          "textSize": 1
        },
        "xMargins": {
          "lower": 30,
          "upper": 10
        },
        "yAxisExtents": {},
        "yAxisTitle": {
          "color": "#777",
          "fontColor": "#818181",
          "fontSize": 2,
          "logScale": false,
          "rotated": false,
          "text": "",
          "textSize": 1
        },
        "yMargins": {
          "lower": 20,
          "upper": 20
        }
      },
      "pluginVersion": "9.1.7",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "-- Dashboard --"
          },
          "panelId": 66,
          "refId": "A"
        }
      ],
      "title": "Orientation Consistency ",
      "transformations": [
        {
          "id": "seriesToColumns",
          "options": {
            "byField": "_time"
          }
        }
      ],
      "transparent": true,
      "type": "michaeldmoore-scatter-panel"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "-- Dashboard --"
      },
      "description": "",
      "gridPos": {
        "h": 8,
        "w": 6,
        "x": 18,
        "y": 74
      },
      "id": 72,
      "interval": "1s",
      "options": {
        "ReferenceLines": [],
        "border": {
          "color": "yellow",
          "size": 0
        },
        "fieldSets": [
          {
            "col": 3,
            "color": "#1F60C4",
            "colorCol": -1,
            "dotSize": 2,
            "hidden": false,
            "lineSize": 1,
            "lineType": "simple",
            "polynomialOrder": 3,
            "sizeCol": -1
          }
        ],
        "grid": {
          "color": "gray"
        },
        "label": {
          "col": -1,
          "color": "#CCC",
          "textSize": 2
        },
        "legend": {
          "show": false,
          "size": 3
        },
        "xAxis": {
          "col": 5,
          "inverted": false
        },
        "xAxisExtents": {},
        "xAxisTitle": {
          "color": "#969696",
          "fontColor": "#8e8e8e",
          "fontSize": 3,
          "logScale": false,
          "rotated": false,
          "text": "Track Distance",
          "textSize": 1
        },
        "xMargins": {
          "lower": 30,
          "upper": 10
        },
        "yAxisExtents": {},
        "yAxisTitle": {
          "color": "#777",
          "fontColor": "#818181",
          "fontSize": 2,
          "logScale": false,
          "rotated": false,
          "text": "",
          "textSize": 1
        },
        "yMargins": {
          "lower": 20,
          "upper": 20
        }
      },
      "pluginVersion": "9.1.7",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "-- Dashboard --"
          },
          "panelId": 66,
          "refId": "A"
        }
      ],
      "title": "Orientation Consistency ",
      "transformations": [
        {
          "id": "seriesToColumns",
          "options": {
            "byField": "_time"
          }
        }
      ],
      "transparent": true,
      "type": "michaeldmoore-scatter-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "fixed"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "scheme",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "noValue": "0",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "WorldPosition_Y"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              },
              {
                "id": "noValue",
                "value": "0"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "WorldPosition_X"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-orange",
                  "mode": "fixed"
                }
              },
              {
                "id": "noValue",
                "value": "0"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "WorldPosition_Z"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              },
              {
                "id": "noValue",
                "value": "0"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Lap"
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": true,
                  "tooltip": false,
                  "viz": true
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "X"
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": true,
                  "tooltip": true,
                  "viz": true
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 82
      },
      "id": 67,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "alias": "Brake",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "autogen",
          "query": "import \"date\"\r\nFinalOutput = [\"SessionId\", \"WorldPosition_X\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"WorldPosition_x\")\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> fill(value: 0.0)\r\n  |> aggregateWindow(every: 1s, fn: mean, createEmpty: false)\r\n  |> group(columns: [])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({ SessionId: r.SessionId , WorldPosition_X: r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "X",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_Brake"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Brake",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "autogen",
          "query": "import \"date\"\r\nFinalOutput = [\"SessionId\", \"WorldPosition_Y\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"WorldPosition_y\")\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> fill(value: 0.0)\r\n  |> aggregateWindow(every: 1s, fn: mean, createEmpty: false)\r\n  \r\n  |> group(columns: [])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({ SessionId: r.SessionId , WorldPosition_Y:r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Y",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_Brake"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Brake",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "autogen",
          "query": "import \"date\"\r\nFinalOutput = [\"SessionId\", \"WorldPosition_Z\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"WorldPosition_z\")\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> fill(value: 0.0)\r\n  |> aggregateWindow(every: 1s, fn: mean, createEmpty: false)\r\n  \r\n  |> group(columns: [])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({ SessionId: r.SessionId , WorldPosition_Z:r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Z",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_Brake"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": []
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "import \"date\"\r\nFinalOutput = [\"Lap\", \"_time\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"CurrentLap\" )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n    |> fill(usePrevious: true)\r\n  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: false)\r\n\r\n  |> group(columns: [])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({ SessionId: r.SessionId , Lap:r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Lap"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "import \"date\"\r\nFinalOutput = [\"X\", \"_time\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"DistanceRoundTrack\")\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n    |> fill(usePrevious: true)\r\n  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: false)\r\n\r\n  |> group(columns: [])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({ SessionId: r.SessionId , X:r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "A"
        }
      ],
      "title": "World Position ",
      "transformations": [
        {
          "id": "seriesToColumns",
          "options": {
            "byField": "_time"
          }
        }
      ],
      "transparent": true,
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "-- Dashboard --"
      },
      "description": "",
      "gridPos": {
        "h": 8,
        "w": 6,
        "x": 12,
        "y": 82
      },
      "id": 71,
      "interval": "1s",
      "options": {
        "ReferenceLines": [],
        "border": {
          "color": "yellow",
          "size": 0
        },
        "fieldSets": [
          {
            "col": 4,
            "color": "#37872D",
            "colorCol": -1,
            "dotSize": 2,
            "hidden": false,
            "lineSize": 1,
            "lineType": "none",
            "polynomialOrder": 3,
            "sizeCol": -2
          },
          {
            "col": 2,
            "color": "#FA6400",
            "colorCol": -1,
            "dotSize": 2,
            "hidden": false,
            "lineSize": 1,
            "lineType": "none",
            "polynomialOrder": 3,
            "sizeCol": -2
          }
        ],
        "grid": {
          "color": "gray"
        },
        "label": {
          "col": -1,
          "color": "#CCC",
          "textSize": 2
        },
        "legend": {
          "show": false,
          "size": 3
        },
        "xAxis": {
          "col": 0,
          "inverted": false
        },
        "xAxisExtents": {},
        "xAxisTitle": {
          "color": "#969696",
          "fontColor": "#8e8e8e",
          "fontSize": 3,
          "logScale": false,
          "rotated": false,
          "text": "Track Distance",
          "textSize": 1
        },
        "xMargins": {
          "lower": 30,
          "upper": 10
        },
        "yAxisExtents": {},
        "yAxisTitle": {
          "color": "#777",
          "fontColor": "#818181",
          "fontSize": 2,
          "logScale": false,
          "rotated": false,
          "text": "",
          "textSize": 1
        },
        "yMargins": {
          "lower": 20,
          "upper": 20
        }
      },
      "pluginVersion": "9.1.7",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "-- Dashboard --"
          },
          "panelId": 67,
          "refId": "A"
        }
      ],
      "title": "World Position Consistency ",
      "transformations": [
        {
          "id": "seriesToColumns",
          "options": {
            "byField": "_time"
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "SessionId 1": true,
              "SessionId 2": true,
              "SessionId 3": true
            },
            "indexByName": {
              "Lap": 8,
              "SessionId 1": 2,
              "SessionId 2": 4,
              "SessionId 3": 6,
              "WorldPosition_X": 3,
              "WorldPosition_Y": 5,
              "WorldPosition_Z": 7,
              "X": 0,
              "_time": 1
            },
            "renameByName": {
              "WorldPosition_X": ""
            }
          }
        }
      ],
      "transparent": true,
      "type": "michaeldmoore-scatter-panel"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "-- Dashboard --"
      },
      "description": "",
      "gridPos": {
        "h": 8,
        "w": 6,
        "x": 18,
        "y": 82
      },
      "id": 75,
      "interval": "1s",
      "options": {
        "ReferenceLines": [],
        "border": {
          "color": "yellow",
          "size": 0
        },
        "fieldSets": [
          {
            "col": 3,
            "color": "#1F60C4",
            "colorCol": -1,
            "dotSize": 2,
            "hidden": false,
            "lineSize": 1,
            "lineType": "none",
            "polynomialOrder": 3,
            "sizeCol": -2
          }
        ],
        "grid": {
          "color": "gray"
        },
        "label": {
          "col": -1,
          "color": "#CCC",
          "textSize": 2
        },
        "legend": {
          "show": false,
          "size": 3
        },
        "xAxis": {
          "col": 0,
          "inverted": false
        },
        "xAxisExtents": {},
        "xAxisTitle": {
          "color": "#969696",
          "fontColor": "#8e8e8e",
          "fontSize": 3,
          "logScale": false,
          "rotated": false,
          "text": "Track Distance",
          "textSize": 1
        },
        "xMargins": {
          "lower": 30,
          "upper": 10
        },
        "yAxisExtents": {},
        "yAxisTitle": {
          "color": "#777",
          "fontColor": "#818181",
          "fontSize": 2,
          "logScale": false,
          "rotated": false,
          "text": "",
          "textSize": 1
        },
        "yMargins": {
          "lower": 20,
          "upper": 20
        }
      },
      "pluginVersion": "9.1.7",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "-- Dashboard --"
          },
          "panelId": 67,
          "refId": "A"
        }
      ],
      "title": "World Position Consistency ",
      "transformations": [
        {
          "id": "seriesToColumns",
          "options": {
            "byField": "_time"
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "SessionId 1": true,
              "SessionId 2": true,
              "SessionId 3": true
            },
            "indexByName": {
              "Lap": 8,
              "SessionId 1": 2,
              "SessionId 2": 4,
              "SessionId 3": 6,
              "WorldPosition_X": 3,
              "WorldPosition_Y": 5,
              "WorldPosition_Z": 7,
              "X": 0,
              "_time": 1
            },
            "renameByName": {
              "WorldPosition_X": ""
            }
          }
        }
      ],
      "transparent": true,
      "type": "michaeldmoore-scatter-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_RACING}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "fixed"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "scheme",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": 5000,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "noValue": "0",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "LatAccel"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "auto"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "LongAccel"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-orange",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "VertAccel"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "SteeringAngle"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Lap"
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": true,
                  "tooltip": false,
                  "viz": true
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "X"
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": true,
                  "tooltip": false,
                  "viz": true
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 90
      },
      "id": 69,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "alias": "Brake",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "autogen",
          "query": "import \"date\"\r\nFinalOutput = [\"LatAccel\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Position_AccelerationVector_LatAccel\"  )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> fill(usePrevious: true)\r\n  |> aggregateWindow(every: 1s, fn: mean, createEmpty: false)\r\n  |> group(columns: [])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({ SessionId: r.SessionId , LatAccel: r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "LatAccel",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_Brake"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Brake",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "autogen",
          "query": "import \"date\"\r\nFinalOutput = [\"LongAccel\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Position_AccelerationVector_LongAccel\"  )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> fill(usePrevious: true)\r\n  |> aggregateWindow(every: 1s, fn: mean, createEmpty: false)\r\n  |> group(columns: [])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({ SessionId: r.SessionId , LongAccel:r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "LongAccel",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_Brake"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Brake",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "autogen",
          "query": "import \"date\"\r\nFinalOutput = [ \"VertAccel\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"Position_AccelerationVector_VertAccel\"  )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> fill(usePrevious: true)\r\n  |> aggregateWindow(every: 1s, fn: mean, createEmpty: false)\r\n  |> group(columns: [])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({ SessionId: r.SessionId , VertAccel:r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "VertAccel",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_Brake"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": []
        },
        {
          "alias": "Brake",
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "groupBy": [
            {
              "params": [
                "1s"
              ],
              "type": "time"
            },
            {
              "params": [
                "0"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "laps_cc",
          "orderByTime": "ASC",
          "policy": "autogen",
          "query": "import \"date\"\r\nFinalOutput = [\"SteeringAngle\", \"_time\", \"_value\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"SteeringAngle\"  )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> fill(usePrevious: true)\r\n  |> aggregateWindow(every: 1s, fn: mean, createEmpty: false)\r\n  |> group(columns: [])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({ SessionId: r.SessionId , SteeringAngle:r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "SteeringAngle",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "telemetry_Brake"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": []
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "import \"date\"\r\nFinalOutput = [\"Lap\", \"_time\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"CurrentLap\"  )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: true)\r\n  |> group(columns: [])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({ SessionId: r.SessionId , Lap:r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "Lap"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_RACING}"
          },
          "hide": false,
          "query": "import \"date\"\r\nFinalOutput = [\"X\", \"_time\"]\r\nStartSession =  time (v: ${SessionStart})\r\nStopSession  = time (v: ${SessionEnd})\r\n\r\nRawSeries = from(bucket: \"racing\")\r\n  |> range(start: StartSession, stop: StopSession)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r._field == \"DistanceRoundTrack\"  )\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> keep(columns: [\"SessionId\",\"_value\",\"_time\"])\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> fill(usePrevious: true)\r\n  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: false)\r\n  |> group(columns: [])\r\n\r\nNamedSeries = RawSeries\r\n  |> map(fn: (r) => ({ SessionId: r.SessionId , X:r._value, _time:r._time, }))\r\n  |> keep(columns:FinalOutput)\r\n\r\nNamedSeries |> yield()",
          "refId": "X"
        }
      ],
      "title": "Acceleration Vector",
      "transformations": [
        {
          "id": "seriesToColumns",
          "options": {
            "byField": "_time"
          }
        }
      ],
      "transparent": true,
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "-- Dashboard --"
      },
      "description": "",
      "gridPos": {
        "h": 8,
        "w": 6,
        "x": 12,
        "y": 90
      },
      "id": 73,
      "interval": "1s",
      "options": {
        "ReferenceLines": [],
        "border": {
          "color": "yellow",
          "size": 0
        },
        "fieldSets": [
          {
            "col": 2,
            "color": "#37872D",
            "colorCol": -1,
            "dotSize": 2,
            "hidden": false,
            "lineSize": 1,
            "lineType": "none",
            "polynomialOrder": 3,
            "sizeCol": -1
          },
          {
            "col": 3,
            "color": "#FA6400",
            "colorCol": -1,
            "dotSize": 2,
            "hidden": false,
            "lineSize": 1,
            "lineType": "none",
            "polynomialOrder": 3,
            "sizeCol": -1
          }
        ],
        "grid": {
          "color": "gray"
        },
        "label": {
          "col": -1,
          "color": "#CCC",
          "textSize": 2
        },
        "legend": {
          "show": false,
          "size": 3
        },
        "xAxis": {
          "col": 6,
          "inverted": false
        },
        "xAxisExtents": {},
        "xAxisTitle": {
          "color": "#969696",
          "fontColor": "#8e8e8e",
          "fontSize": 3,
          "logScale": false,
          "rotated": false,
          "text": "Track Distance",
          "textSize": 1
        },
        "xMargins": {
          "lower": 30,
          "upper": 10
        },
        "yAxisExtents": {},
        "yAxisTitle": {
          "color": "#777",
          "fontColor": "#818181",
          "fontSize": 2,
          "logScale": false,
          "rotated": false,
          "text": "",
          "textSize": 1
        },
        "yMargins": {
          "lower": 20,
          "upper": 20
        }
      },
      "pluginVersion": "9.1.7",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "-- Dashboard --"
          },
          "panelId": 69,
          "refId": "A"
        }
      ],
      "title": "Orientation Consistency ",
      "transformations": [
        {
          "id": "seriesToColumns",
          "options": {
            "byField": "_time"
          }
        }
      ],
      "transparent": true,
      "type": "michaeldmoore-scatter-panel"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "-- Dashboard --"
      },
      "description": "",
      "gridPos": {
        "h": 8,
        "w": 6,
        "x": 18,
        "y": 90
      },
      "id": 74,
      "interval": "1s",
      "options": {
        "ReferenceLines": [],
        "border": {
          "color": "yellow",
          "size": 0
        },
        "fieldSets": [
          {
            "col": 1,
            "color": "#1F60C4",
            "colorCol": -1,
            "dotSize": 2,
            "hidden": false,
            "lineSize": 1,
            "lineType": "none",
            "polynomialOrder": 3,
            "sizeCol": -1
          }
        ],
        "grid": {
          "color": "gray"
        },
        "label": {
          "col": -1,
          "color": "#CCC",
          "textSize": 2
        },
        "legend": {
          "show": false,
          "size": 3
        },
        "xAxis": {
          "col": 6,
          "inverted": false
        },
        "xAxisExtents": {},
        "xAxisTitle": {
          "color": "#969696",
          "fontColor": "#8e8e8e",
          "fontSize": 3,
          "logScale": false,
          "rotated": false,
          "text": "Track Distance",
          "textSize": 1
        },
        "xMargins": {
          "lower": 30,
          "upper": 10
        },
        "yAxisExtents": {},
        "yAxisTitle": {
          "color": "#777",
          "fontColor": "#818181",
          "fontSize": 2,
          "logScale": false,
          "rotated": false,
          "text": "",
          "textSize": 1
        },
        "yMargins": {
          "lower": 20,
          "upper": 20
        }
      },
      "pluginVersion": "9.1.7",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "-- Dashboard --"
          },
          "panelId": 69,
          "refId": "A"
        }
      ],
      "title": "Orientation Consistency ",
      "transformations": [
        {
          "id": "seriesToColumns",
          "options": {
            "byField": "_time"
          }
        }
      ],
      "transparent": true,
      "type": "michaeldmoore-scatter-panel"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "-- Dashboard --"
      },
      "description": "",
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 98
      },
      "id": 65,
      "interval": "1s",
      "options": {
        "ReferenceLines": [],
        "border": {
          "color": "yellow",
          "size": 0
        },
        "fieldSets": [
          {
            "col": 7,
            "color": "#d83e55",
            "colorCol": -1,
            "dotSize": 2,
            "hidden": false,
            "lineSize": 1,
            "lineType": "simple",
            "polynomialOrder": 3,
            "sizeCol": -1
          },
          {
            "col": 8,
            "color": "#37872D",
            "colorCol": -1,
            "dotSize": 2,
            "hidden": false,
            "lineSize": 1,
            "lineType": "simple",
            "polynomialOrder": 3,
            "sizeCol": -1
          },
          {
            "col": -1,
            "color": "#d32a0c",
            "colorCol": -1,
            "dotSize": 2,
            "hidden": false,
            "lineSize": 1,
            "lineType": "none",
            "polynomialOrder": 3,
            "sizeCol": -1
          }
        ],
        "grid": {
          "color": "gray"
        },
        "label": {
          "col": -1,
          "color": "#CCC",
          "textSize": 2
        },
        "legend": {
          "show": false,
          "size": 3
        },
        "xAxis": {
          "col": 6,
          "inverted": false
        },
        "xAxisExtents": {},
        "xAxisTitle": {
          "color": "#969696",
          "fontColor": "#8e8e8e",
          "fontSize": 3,
          "logScale": false,
          "rotated": false,
          "text": "Track Distance",
          "textSize": 1
        },
        "xMargins": {
          "lower": 30,
          "upper": 10
        },
        "yAxisExtents": {
          "max": 100,
          "min": 0
        },
        "yAxisTitle": {
          "color": "#777",
          "fontColor": "#818181",
          "fontSize": 2,
          "logScale": false,
          "rotated": false,
          "text": "",
          "textSize": 1
        },
        "yMargins": {
          "lower": 20,
          "upper": 20
        }
      },
      "pluginVersion": "9.1.7",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "-- Dashboard --"
          },
          "panelId": 2,
          "refId": "A"
        }
      ],
      "title": "Inputs Consistency ",
      "transformations": [
        {
          "id": "seriesToColumns",
          "options": {
            "byField": "_time"
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "Brake%",
            "binary": {
              "left": "Brake",
              "operator": "*",
              "reducer": "sum",
              "right": "100"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "Throttle%",
            "binary": {
              "left": "Throttle",
              "operator": "*",
              "reducer": "sum",
              "right": "100"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        }
      ],
      "transparent": true,
      "type": "michaeldmoore-scatter-panel"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "-- Dashboard --"
      },
      "description": "",
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 98
      },
      "id": 68,
      "interval": "1s",
      "options": {
        "ReferenceLines": [],
        "border": {
          "color": "yellow",
          "size": 0
        },
        "fieldSets": [
          {
            "col": 4,
            "color": "#FFCB7D",
            "colorCol": -1,
            "dotSize": 2,
            "hidden": false,
            "lineSize": 1,
            "lineType": "simple",
            "polynomialOrder": 3,
            "sizeCol": -1
          },
          {
            "col": 1,
            "color": "#1F60C4",
            "colorCol": -1,
            "dotSize": 2,
            "hidden": false,
            "lineSize": 1,
            "lineType": "simple",
            "polynomialOrder": 3,
            "sizeCol": -1
          }
        ],
        "grid": {
          "color": "gray"
        },
        "label": {
          "col": -1,
          "color": "#CCC",
          "textSize": 2
        },
        "legend": {
          "show": false,
          "size": 3
        },
        "xAxis": {
          "col": 6,
          "inverted": false
        },
        "xAxisExtents": {},
        "xAxisTitle": {
          "color": "#969696",
          "fontColor": "#8e8e8e",
          "fontSize": 3,
          "logScale": false,
          "rotated": false,
          "text": "Track Distance",
          "textSize": 1
        },
        "xMargins": {
          "lower": 30,
          "upper": 10
        },
        "yAxisExtents": {},
        "yAxisTitle": {
          "color": "#777",
          "fontColor": "#818181",
          "fontSize": 2,
          "logScale": false,
          "rotated": false,
          "text": "",
          "textSize": 1
        },
        "yMargins": {
          "lower": 20,
          "upper": 20
        }
      },
      "pluginVersion": "9.1.7",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "-- Dashboard --"
          },
          "panelId": 69,
          "refId": "A"
        }
      ],
      "title": "Inputs Consistency ",
      "transformations": [
        {
          "id": "seriesToColumns",
          "options": {
            "byField": "_time"
          }
        }
      ],
      "transparent": true,
      "type": "michaeldmoore-scatter-panel"
    }
  ],
  "refresh": false,
  "revision": 1,
  "schemaVersion": 37,
  "style": "dark",
  "tags": [
    "B4Mad",
    "2nd_Level",
    "Extended"
  ],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "Km/h",
          "value": "3.6"
        },
        "hide": 0,
        "includeAll": false,
        "label": "Speed",
        "multi": false,
        "name": "Speed",
        "options": [
          {
            "selected": true,
            "text": "Km/h",
            "value": "3.6"
          },
          {
            "selected": false,
            "text": "MPH",
            "value": "2.236936292054"
          }
        ],
        "query": "Km/h : 3.6 , MPH : 2.236936292054",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "e Grant",
          "value": "e Grant"
        },
        "datasource": {
          "type": "influxdb",
          "uid": "${DS_RACING}"
        },
        "definition": "import \"influxdata/influxdb/schema\"\r\nschema.tagValues(bucket: \"racing\", tag: \"user\")",
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "user",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\r\nschema.tagValues(bucket: \"racing\", tag: \"user\")",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "1690048225",
          "value": "1690048225"
        },
        "datasource": {
          "type": "influxdb",
          "uid": "${DS_RACING}"
        },
        "definition": "import \"influxdata/influxdb/schema\"\r\nschema.tagValues(\r\n    bucket: \"racing\",\r\n    tag: \"SessionId\",\r\n    predicate: (r) => r[\"user\"] == \"${user}\",\r\n)",
        "hide": 2,
        "includeAll": false,
        "label": "SessionId",
        "multi": false,
        "name": "SessionId",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\r\nschema.tagValues(\r\n    bucket: \"racing\",\r\n    tag: \"SessionId\",\r\n    predicate: (r) => r[\"user\"] == \"${user}\",\r\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 3,
        "type": "query"
      },
      {
        "current": {
          "isNone": true,
          "selected": false,
          "text": "None",
          "value": ""
        },
        "datasource": {
          "type": "influxdb",
          "uid": "${DS_RACING}"
        },
        "definition": "data = from(bucket: \"racing\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"CurrentLapTime\" and r._value >= 0)\r\n\r\nStart = data\r\n  |> first(column: \"_time\")\r\n  |> map(fn: (r) => ({r with Start: int(v: r._time)}))\r\n  |> group()  \r\n  |> keep(columns: [\"Start\"])\r\n  |> yield()",
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "SessionStart",
        "options": [],
        "query": "data = from(bucket: \"racing\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"CurrentLapTime\" and r._value >= 0)\r\n\r\nStart = data\r\n  |> first(column: \"_time\")\r\n  |> map(fn: (r) => ({r with Start: int(v: r._time)}))\r\n  |> group()  \r\n  |> keep(columns: [\"Start\"])\r\n  |> yield()",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "isNone": true,
          "selected": false,
          "text": "None",
          "value": ""
        },
        "datasource": {
          "type": "influxdb",
          "uid": "${DS_RACING}"
        },
        "definition": "data = from(bucket: \"racing\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"CurrentLapTime\" and r._value >= 0)\r\n\r\nStop = data\r\n  |> last(column: \"_time\")\r\n  |> map(fn: (r) => ({r with Stop: int(v: r._time)}))\r\n  |> group()  \r\n  |> keep(columns: [\"Stop\"])\r\n  |> yield()\r\n",
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "SessionEnd",
        "options": [],
        "query": "data = from(bucket: \"racing\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> filter(fn: (r) => r.user == \"${user}\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"CurrentLapTime\" and r._value >= 0)\r\n\r\nStop = data\r\n  |> last(column: \"_time\")\r\n  |> map(fn: (r) => ({r with Stop: int(v: r._time)}))\r\n  |> group()  \r\n  |> keep(columns: [\"Stop\"])\r\n  |> yield()\r\n",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "1031",
          "value": "1031"
        },
        "datasource": {
          "type": "influxdb",
          "uid": "${DS_RACING}"
        },
        "definition": "import \"date\"\r\nimport \"math\"\r\ndata = from(bucket: \"racing\")\r\n  |> range(start:-1y, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> filter(fn: (r) => r.user == \"${user}\")  \r\n  |> filter(fn: (r) => r[\"_field\"] == \"CurrentLapTime\" and r._value >= 0)\r\nStop = data\r\n  |> last(column: \"_time\")\r\nStart = data\r\n  |> first(column: \"_time\")\r\njoin(tables: {min: Start, max: Stop}, on: [\"SessionId\"], method: \"inner\")\r\n  |> group()  \r\n  |> map(fn: (r) => ({r with Duration: math.round(x: (float(v: int(v: duration(v: uint(v: r._time_max) - uint(v: r._time_min))))/60000000000.0)*60.0)}))\r\n  |> keep(columns: [\"Duration\"])\r\n  |> yield()  ",
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "SessionLen",
        "options": [],
        "query": "import \"date\"\r\nimport \"math\"\r\ndata = from(bucket: \"racing\")\r\n  |> range(start:-1y, stop: now())\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"laps_cc\")\r\n  |> filter(fn: (r) => r[\"SessionId\"] == \"${SessionId}\")\r\n  |> filter(fn: (r) => r.user == \"${user}\")  \r\n  |> filter(fn: (r) => r[\"_field\"] == \"CurrentLapTime\" and r._value >= 0)\r\nStop = data\r\n  |> last(column: \"_time\")\r\nStart = data\r\n  |> first(column: \"_time\")\r\njoin(tables: {min: Start, max: Stop}, on: [\"SessionId\"], method: \"inner\")\r\n  |> group()  \r\n  |> map(fn: (r) => ({r with Duration: math.round(x: (float(v: int(v: duration(v: uint(v: r._time_max) - uint(v: r._time_min))))/60000000000.0)*60.0)}))\r\n  |> keep(columns: [\"Duration\"])\r\n  |> yield()  ",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "hide": 2,
        "name": "DS_RACING",
        "query": "Racing",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "hide": 2,
        "name": "RegEX",
        "query": "/^([a-zA-Z0-9ü]+)/",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "hide": 2,
        "name": "Domain",
        "query": "https://pitwall.b4mad.racing",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "hide": 2,
        "name": "Track",
        "query": "c726e9a2-350c-459d-aa40-2035073f5035/track-standings",
        "skipUrlSync": false,
        "type": "constant"
      }
    ]
  },
  "time": {
    "from": "now-7d",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ]
  },
  "timezone": "browser",
  "title": "Session Extended",
  "uid": "e12c7ccb-ff51-4525-b5da-0d783a1019ef",
  "version": 48,
  "weekStart": ""
}
